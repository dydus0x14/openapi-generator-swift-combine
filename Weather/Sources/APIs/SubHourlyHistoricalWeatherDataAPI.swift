//
// SubHourlyHistoricalWeatherDataAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class SubHourlyHistoricalWeatherDataAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://api.weatherbit.io/v2.0")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    ///
    /// Enum for parameter units
    ///
    public enum HistorySubhourlycityIdcityIdGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum HistorySubhourlycityIdcityIdGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }
    ///
    /// Enum for parameter tz
    ///
    public enum HistorySubhourlycityIdcityIdGetTz: String, Codable, CaseIterable {
        case local = "local"
        case utc = "utc"
    }

    /// Returns Historical Observations - Given a City ID
    /// - GET /history/subhourly?city_id={city_id}
    /// - Returns Historical Observations - Given a City ID.
    /// - parameter cityId: (path) City ID. Example: 4487042 
    /// - parameter startDate: (query) Start Date (YYYY-MM-DD or YYYY-MM-DD:HH) 
    /// - parameter endDate: (query) End Date (YYYY-MM-DD or YYYY-MM-DD:HH) 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter tz: (query) Assume utc (default) or local time for start_date, end_date (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
    /// - returns: AnyPublisher<HistorySubhourly, Error> 
    open func historySubhourlycityIdcityIdGet(cityId: String, startDate: String, endDate: String, key: String, units: HistorySubhourlycityIdcityIdGetUnits? = nil, lang: HistorySubhourlycityIdcityIdGetLang? = nil, tz: HistorySubhourlycityIdcityIdGetTz? = nil, callback: String? = nil) -> AnyPublisher<HistorySubhourly, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/history/subhourly?city_id&#x3D;{city_id}"
                path = path.replacingOccurrences(of: "{city_id}", with: cityId)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "start_date", value: startDate))
                queryItems.append(URLQueryItem(name: "end_date", value: endDate))
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let tz = tz { queryItems.append(URLQueryItem(name: "tz", value: tz.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<HistorySubhourly, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(HistorySubhourly.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter units
    ///
    public enum HistorySubhourlycitycitycountrycountryGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum HistorySubhourlycitycitycountrycountryGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }
    ///
    /// Enum for parameter tz
    ///
    public enum HistorySubhourlycitycitycountrycountryGetTz: String, Codable, CaseIterable {
        case local = "local"
        case utc = "utc"
    }

    /// Returns Historical Observations - Given City and/or State, Country.
    /// - GET /history/subhourly?city={city}&country={country}
    /// - Returns Historical Observations - Given a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate.
    /// - parameter city: (path) City search. Example - &amp;city&#x3D;Raleigh,NC or &amp;city&#x3D;Berlin,DE or city&#x3D;Paris&amp;country&#x3D;FR 
    /// - parameter country: (path) Country Code (2 letter). 
    /// - parameter startDate: (query) Start Date (YYYY-MM-DD or YYYY-MM-DD:HH). 
    /// - parameter endDate: (query) End Date (YYYY-MM-DD or YYYY-MM-DD:HH). 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter state: (query) Full name of state. (optional)
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter tz: (query) Assume utc (default) or local time for start_date, end_date (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
    /// - returns: AnyPublisher<History, Error> 
    open func historySubhourlycitycitycountrycountryGet(city: String, country: String, startDate: String, endDate: String, key: String, state: String? = nil, units: HistorySubhourlycitycitycountrycountryGetUnits? = nil, lang: HistorySubhourlycitycitycountrycountryGetLang? = nil, tz: HistorySubhourlycitycitycountrycountryGetTz? = nil, callback: String? = nil) -> AnyPublisher<History, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/history/subhourly?city&#x3D;{city}&amp;country&#x3D;{country}"
                path = path.replacingOccurrences(of: "{city}", with: city)
                path = path.replacingOccurrences(of: "{country}", with: country)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let state = state { queryItems.append(URLQueryItem(name: "state", value: state)) } 
                queryItems.append(URLQueryItem(name: "start_date", value: startDate))
                queryItems.append(URLQueryItem(name: "end_date", value: endDate))
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let tz = tz { queryItems.append(URLQueryItem(name: "tz", value: tz.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<History, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(History.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter units
    ///
    public enum HistorySubhourlylatlatlonlonGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum HistorySubhourlylatlatlonlonGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }
    ///
    /// Enum for parameter tz
    ///
    public enum HistorySubhourlylatlatlonlonGetTz: String, Codable, CaseIterable {
        case local = "local"
        case utc = "utc"
    }

    /// Returns Historical Observations - Given a lat/lon.
    /// - GET /history/subhourly?lat={lat}&lon={lon}
    /// - Returns Historical Observations - Given a lat, and lon.
    /// - parameter lat: (path) Latitude component of location. 
    /// - parameter lon: (path) Longitude component of location. 
    /// - parameter startDate: (query) Start Date (YYYY-MM-DD or YYYY-MM-DD:HH). 
    /// - parameter endDate: (query) End Date (YYYY-MM-DD or YYYY-MM-DD:HH). 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter tz: (query) Assume utc (default) or local time for start_date, end_date (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
    /// - returns: AnyPublisher<HistorySubhourly, Error> 
    open func historySubhourlylatlatlonlonGet(lat: Double, lon: Double, startDate: String, endDate: String, key: String, units: HistorySubhourlylatlatlonlonGetUnits? = nil, lang: HistorySubhourlylatlatlonlonGetLang? = nil, tz: HistorySubhourlylatlatlonlonGetTz? = nil, callback: String? = nil) -> AnyPublisher<HistorySubhourly, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/history/subhourly?lat&#x3D;{lat}&amp;lon&#x3D;{lon}"
                path = path.replacingOccurrences(of: "{lat}", with: "\(lat)")
                path = path.replacingOccurrences(of: "{lon}", with: "\(lon)")
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "start_date", value: startDate))
                queryItems.append(URLQueryItem(name: "end_date", value: endDate))
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let tz = tz { queryItems.append(URLQueryItem(name: "tz", value: tz.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<HistorySubhourly, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(HistorySubhourly.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter units
    ///
    public enum HistorySubhourlypostalCodepostalCodeGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum HistorySubhourlypostalCodepostalCodeGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }
    ///
    /// Enum for parameter tz
    ///
    public enum HistorySubhourlypostalCodepostalCodeGetTz: String, Codable, CaseIterable {
        case local = "local"
        case utc = "utc"
    }

    /// Returns Historical Observations - Given a Postal Code
    /// - GET /history/subhourly?postal_code={postal_code}
    /// - Returns Historical Observations - Given a Postal Code.
    /// - parameter postalCode: (path) Postal Code. Example: 28546 
    /// - parameter startDate: (query) Start Date (YYYY-MM-DD or YYYY-MM-DD:HH) 
    /// - parameter endDate: (query) End Date (YYYY-MM-DD or YYYY-MM-DD:HH) 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter country: (query) Country Code (2 letter). (optional)
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter tz: (query) Assume utc (default) or local time for start_date, end_date (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
    /// - returns: AnyPublisher<HistorySubhourly, Error> 
    open func historySubhourlypostalCodepostalCodeGet(postalCode: String, startDate: String, endDate: String, key: String, country: String? = nil, units: HistorySubhourlypostalCodepostalCodeGetUnits? = nil, lang: HistorySubhourlypostalCodepostalCodeGetLang? = nil, tz: HistorySubhourlypostalCodepostalCodeGetTz? = nil, callback: String? = nil) -> AnyPublisher<HistorySubhourly, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/history/subhourly?postal_code&#x3D;{postal_code}"
                path = path.replacingOccurrences(of: "{postal_code}", with: postalCode)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let country = country { queryItems.append(URLQueryItem(name: "country", value: country)) } 
                queryItems.append(URLQueryItem(name: "start_date", value: startDate))
                queryItems.append(URLQueryItem(name: "end_date", value: endDate))
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let tz = tz { queryItems.append(URLQueryItem(name: "tz", value: tz.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<HistorySubhourly, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(HistorySubhourly.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter units
    ///
    public enum HistorySubhourlystationstationGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum HistorySubhourlystationstationGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }
    ///
    /// Enum for parameter tz
    ///
    public enum HistorySubhourlystationstationGetTz: String, Codable, CaseIterable {
        case local = "local"
        case utc = "utc"
    }

    /// Returns Historical Observations - Given a station ID.
    /// - GET /history/subhourly?station={station}
    /// - Returns Historical Observations - Given a station ID.
    /// - parameter station: (path) Station ID. 
    /// - parameter startDate: (query) Start Date (YYYY-MM-DD or YYYY-MM-DD:HH). 
    /// - parameter endDate: (query) End Date (YYYY-MM-DD or YYYY-MM-DD:HH). 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter tz: (query) Assume utc (default) or local time for start_date, end_date (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
    /// - returns: AnyPublisher<HistorySubhourly, Error> 
    open func historySubhourlystationstationGet(station: String, startDate: String, endDate: String, key: String, units: HistorySubhourlystationstationGetUnits? = nil, lang: HistorySubhourlystationstationGetLang? = nil, tz: HistorySubhourlystationstationGetTz? = nil, callback: String? = nil) -> AnyPublisher<HistorySubhourly, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/history/subhourly?station&#x3D;{station}"
                path = path.replacingOccurrences(of: "{station}", with: station)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "start_date", value: startDate))
                queryItems.append(URLQueryItem(name: "end_date", value: endDate))
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let tz = tz { queryItems.append(URLQueryItem(name: "tz", value: tz.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<HistorySubhourly, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(HistorySubhourly.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
