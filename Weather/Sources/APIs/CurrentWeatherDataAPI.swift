//
// CurrentWeatherDataAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class CurrentWeatherDataAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://api.weatherbit.io/v2.0")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    ///
    /// Enum for parameter units
    ///
    public enum CurrentcitiescitiesGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter marine
    ///
    public enum CurrentcitiescitiesGetMarine: String, Codable, CaseIterable {
        case t = "t"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum CurrentcitiescitiesGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }

    /// Returns a group of observations given a list of cities
    /// - GET /current?cities={cities}
    /// - Returns a group of Current Observations - Given a list of City IDs. 
    /// - parameter cities: (path) Comma separated list of City ID&#39;s. Example: 4487042, 4494942, 4504871 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter marine: (query) Marine stations only (buoys, oil platforms, etc) (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback - Example - callback&#x3D;func (optional)
    /// - returns: AnyPublisher<CurrentObsGroup, Error> 
    open func currentcitiescitiesGet(cities: String, key: String, units: CurrentcitiescitiesGetUnits? = nil, marine: CurrentcitiescitiesGetMarine? = nil, lang: CurrentcitiescitiesGetLang? = nil, callback: String? = nil) -> AnyPublisher<CurrentObsGroup, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/current?cities&#x3D;{cities}"
                path = path.replacingOccurrences(of: "{cities}", with: cities)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let marine = marine { queryItems.append(URLQueryItem(name: "marine", value: marine.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CurrentObsGroup, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(CurrentObsGroup.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter units
    ///
    public enum CurrentcityIdcityIdGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter include
    ///
    public enum CurrentcityIdcityIdGetInclude: String, Codable, CaseIterable {
        case minutely = "minutely"
    }
    ///
    /// Enum for parameter marine
    ///
    public enum CurrentcityIdcityIdGetMarine: String, Codable, CaseIterable {
        case t = "t"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum CurrentcityIdcityIdGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }

    /// Returns a current observation by city id.
    /// - GET /current?city_id={city_id}
    /// - Returns current weather observation - Given a City ID. 
    /// - parameter cityId: (path) City ID. Example: 4487042 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter include: (query) Include 1 hour - minutely forecast in the response (optional)
    /// - parameter marine: (query) Marine stations only (buoys, oil platforms, etc) (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback - Example - callback&#x3D;func (optional)
    /// - returns: AnyPublisher<CurrentObsGroup, Error> 
    open func currentcityIdcityIdGet(cityId: String, key: String, units: CurrentcityIdcityIdGetUnits? = nil, include: CurrentcityIdcityIdGetInclude? = nil, marine: CurrentcityIdcityIdGetMarine? = nil, lang: CurrentcityIdcityIdGetLang? = nil, callback: String? = nil) -> AnyPublisher<CurrentObsGroup, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/current?city_id&#x3D;{city_id}"
                path = path.replacingOccurrences(of: "{city_id}", with: cityId)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let marine = marine { queryItems.append(URLQueryItem(name: "marine", value: marine.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CurrentObsGroup, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(CurrentObsGroup.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter include
    ///
    public enum CurrentcitycitycountrycountryGetInclude: String, Codable, CaseIterable {
        case minutely = "minutely"
    }
    ///
    /// Enum for parameter marine
    ///
    public enum CurrentcitycitycountrycountryGetMarine: String, Codable, CaseIterable {
        case t = "t"
    }
    ///
    /// Enum for parameter units
    ///
    public enum CurrentcitycitycountrycountryGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum CurrentcitycitycountrycountryGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }

    /// Returns a Current Observation - Given City and/or State, Country.
    /// - GET /current?city={city}&country={country}
    /// - Returns a Current Observation - Given a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate.
    /// - parameter city: (path) City search.. Example - &amp;city&#x3D;Raleigh,NC or &amp;city&#x3D;Berlin,DE or city&#x3D;Paris&amp;country&#x3D;FR 
    /// - parameter country: (path) Country Code (2 letter). 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter include: (query) Include 1 hour - minutely forecast in the response (optional)
    /// - parameter state: (query) Full name of state. (optional)
    /// - parameter marine: (query) Marine stations only (buoys, oil platforms, etc) (optional)
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback - Example - callback&#x3D;func (optional)
    /// - returns: AnyPublisher<CurrentObsGroup, Error> 
    open func currentcitycitycountrycountryGet(city: String, country: String, key: String, include: CurrentcitycitycountrycountryGetInclude? = nil, state: String? = nil, marine: CurrentcitycitycountrycountryGetMarine? = nil, units: CurrentcitycitycountrycountryGetUnits? = nil, lang: CurrentcitycitycountrycountryGetLang? = nil, callback: String? = nil) -> AnyPublisher<CurrentObsGroup, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/current?city&#x3D;{city}&amp;country&#x3D;{country}"
                path = path.replacingOccurrences(of: "{city}", with: city)
                path = path.replacingOccurrences(of: "{country}", with: country)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let state = state { queryItems.append(URLQueryItem(name: "state", value: state)) } 
                if let marine = marine { queryItems.append(URLQueryItem(name: "marine", value: marine.rawValue)) } 
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CurrentObsGroup, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(CurrentObsGroup.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter include
    ///
    public enum CurrentlatlatlonlonGetInclude: String, Codable, CaseIterable {
        case minutely = "minutely"
    }
    ///
    /// Enum for parameter marine
    ///
    public enum CurrentlatlatlonlonGetMarine: String, Codable, CaseIterable {
        case t = "t"
    }
    ///
    /// Enum for parameter units
    ///
    public enum CurrentlatlatlonlonGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum CurrentlatlatlonlonGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }

    /// Returns a Current Observation - Given a lat/lon.
    /// - GET /current?lat={lat}&lon={lon}
    /// - Returns a Current Observation - given a lat, and a lon.
    /// - parameter lat: (path) Latitude component of location. 
    /// - parameter lon: (path) Longitude component of location. 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter include: (query) Include 1 hour - minutely forecast in the response (optional)
    /// - parameter marine: (query) Marine stations only (buoys, oil platforms, etc) (optional)
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback - Example - callback&#x3D;func (optional)
    /// - returns: AnyPublisher<CurrentObsGroup, Error> 
    open func currentlatlatlonlonGet(lat: Double, lon: Double, key: String, include: CurrentlatlatlonlonGetInclude? = nil, marine: CurrentlatlatlonlonGetMarine? = nil, units: CurrentlatlatlonlonGetUnits? = nil, lang: CurrentlatlatlonlonGetLang? = nil, callback: String? = nil) -> AnyPublisher<CurrentObsGroup, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/current?lat&#x3D;{lat}&amp;lon&#x3D;{lon}"
                path = path.replacingOccurrences(of: "{lat}", with: "\(lat)")
                path = path.replacingOccurrences(of: "{lon}", with: "\(lon)")
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let marine = marine { queryItems.append(URLQueryItem(name: "marine", value: marine.rawValue)) } 
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CurrentObsGroup, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(CurrentObsGroup.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter units
    ///
    public enum CurrentpointspointsGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum CurrentpointspointsGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }

    /// Returns a group of observations given a list of points in the format (lat1, lon1), (lat2, lon2), (latN, lonN), ...
    /// - GET /current?points={points}
    /// - Returns a group of Current Observations - Given a list of points (lat1, lon1), (lat2, lon2), (latN, lonN), ...
    /// - parameter points: (path) Comma separated list of points. Example: (35.5, -75.5),(45, 65),(45.12, -130.5) 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
    /// - returns: AnyPublisher<CurrentObsGroup, Error> 
    open func currentpointspointsGet(points: String, key: String, units: CurrentpointspointsGetUnits? = nil, lang: CurrentpointspointsGetLang? = nil, callback: String? = nil) -> AnyPublisher<CurrentObsGroup, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/current?points&#x3D;{points}"
                path = path.replacingOccurrences(of: "{points}", with: points)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CurrentObsGroup, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(CurrentObsGroup.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter include
    ///
    public enum CurrentpostalCodepostalCodeGetInclude: String, Codable, CaseIterable {
        case minutely = "minutely"
    }
    ///
    /// Enum for parameter marine
    ///
    public enum CurrentpostalCodepostalCodeGetMarine: String, Codable, CaseIterable {
        case t = "t"
    }
    ///
    /// Enum for parameter units
    ///
    public enum CurrentpostalCodepostalCodeGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum CurrentpostalCodepostalCodeGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }

    /// Returns a current observation by postal code.
    /// - GET /current?postal_code={postal_code}
    /// - Returns current weather observation - Given a Postal Code. 
    /// - parameter postalCode: (path) Postal Code. Example: 28546 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter country: (query) Country Code (2 letter). (optional)
    /// - parameter include: (query) Include 1 hour - minutely forecast in the response (optional)
    /// - parameter marine: (query) Marine stations only (buoys, oil platforms, etc) (optional)
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback - Example - callback&#x3D;func (optional)
    /// - returns: AnyPublisher<CurrentObsGroup, Error> 
    open func currentpostalCodepostalCodeGet(postalCode: String, key: String, country: String? = nil, include: CurrentpostalCodepostalCodeGetInclude? = nil, marine: CurrentpostalCodepostalCodeGetMarine? = nil, units: CurrentpostalCodepostalCodeGetUnits? = nil, lang: CurrentpostalCodepostalCodeGetLang? = nil, callback: String? = nil) -> AnyPublisher<CurrentObsGroup, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/current?postal_code&#x3D;{postal_code}"
                path = path.replacingOccurrences(of: "{postal_code}", with: postalCode)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let country = country { queryItems.append(URLQueryItem(name: "country", value: country)) } 
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let marine = marine { queryItems.append(URLQueryItem(name: "marine", value: marine.rawValue)) } 
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CurrentObsGroup, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(CurrentObsGroup.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter units
    ///
    public enum CurrentstationsstationsGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum CurrentstationsstationsGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }

    /// Returns a group of observations given a list of stations
    /// - GET /current?stations={stations}
    /// - Returns a group of Current Observations - Given a list of Station Call IDs. 
    /// - parameter stations: (path) Comma separated list of Station Call ID&#39;s. Example: KRDU,KBFI,KVNY 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
    /// - returns: AnyPublisher<CurrentObsGroup, Error> 
    open func currentstationsstationsGet(stations: String, key: String, units: CurrentstationsstationsGetUnits? = nil, lang: CurrentstationsstationsGetLang? = nil, callback: String? = nil) -> AnyPublisher<CurrentObsGroup, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/current?stations&#x3D;{stations}"
                path = path.replacingOccurrences(of: "{stations}", with: stations)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CurrentObsGroup, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(CurrentObsGroup.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter include
    ///
    public enum CurrentstationstationGetInclude: String, Codable, CaseIterable {
        case minutely = "minutely"
    }
    ///
    /// Enum for parameter units
    ///
    public enum CurrentstationstationGetUnits: String, Codable, CaseIterable {
        case s = "S"
        case i = "I"
    }
    ///
    /// Enum for parameter lang
    ///
    public enum CurrentstationstationGetLang: String, Codable, CaseIterable {
        case ar = "ar"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bs = "bs"
        case ca = "ca"
        case cs = "cs"
        case de = "de"
        case fi = "fi"
        case fr = "fr"
        case el = "el"
        case es = "es"
        case et = "et"
        case hr = "hr"
        case hu = "hu"
        case id = "id"
        case it = "it"
        case _is = "is"
        case kw = "kw"
        case nb = "nb"
        case nl = "nl"
        case pl = "pl"
        case pt = "pt"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sr = "sr"
        case sv = "sv"
        case tr = "tr"
        case uk = "uk"
        case zh = "zh"
        case zhTw = "zh-tw"
    }

    /// Returns a Current Observation. - Given a station ID.
    /// - GET /current?station={station}
    /// - Returns a Current Observation - Given a station ID.
    /// - parameter station: (path) Station Call ID. 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter include: (query) Include 1 hour - minutely forecast in the response (optional)
    /// - parameter units: (query) Convert to units. Default Metric See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;units field description&lt;/a&gt; (optional)
    /// - parameter lang: (query) Language (Default: English) See &lt;a target&#x3D;&#39;blank&#39; href&#x3D;&#39;/api/requests&#39;&gt;language field description&lt;/a&gt; (optional)
    /// - parameter callback: (query) Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
    /// - returns: AnyPublisher<CurrentObsGroup, Error> 
    open func currentstationstationGet(station: String, key: String, include: CurrentstationstationGetInclude? = nil, units: CurrentstationstationGetUnits? = nil, lang: CurrentstationstationGetLang? = nil, callback: String? = nil) -> AnyPublisher<CurrentObsGroup, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/current?station&#x3D;{station}"
                path = path.replacingOccurrences(of: "{station}", with: station)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let units = units { queryItems.append(URLQueryItem(name: "units", value: units.rawValue)) } 
                if let lang = lang { queryItems.append(URLQueryItem(name: "lang", value: lang.rawValue)) } 
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CurrentObsGroup, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(CurrentObsGroup.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
