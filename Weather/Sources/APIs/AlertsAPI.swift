//
// AlertsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class AlertsAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://api.weatherbit.io/v2.0")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }


    /// Returns severe weather alerts issued by meteorological agencies - Given a lat/lon.
    /// - GET /alerts?lat={lat}&lon={lon}
    /// - Returns severe weather alerts issued by meteorological agencies - given a lat, and a lon.
    /// - parameter lat: (path) Latitude component of location. 
    /// - parameter lon: (path) Longitude component of location. 
    /// - parameter key: (query) Your registered API key. 
    /// - parameter callback: (query) Wraps return in jsonp callback - Example - callback&#x3D;func (optional)
    /// - returns: AnyPublisher<WeatherAlert, Error> 
    open func alertslatlatlonlonGet(lat: Double, lon: Double, key: String, callback: String? = nil) -> AnyPublisher<WeatherAlert, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/alerts?lat&#x3D;{lat}&amp;lon&#x3D;{lon}"
                path = path.replacingOccurrences(of: "{lat}", with: "\(lat)")
                path = path.replacingOccurrences(of: "{lon}", with: "\(lon)")
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let callback = callback { queryItems.append(URLQueryItem(name: "callback", value: callback)) } 
                queryItems.append(URLQueryItem(name: "key", value: key))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<WeatherAlert, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(WeatherAlert.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
