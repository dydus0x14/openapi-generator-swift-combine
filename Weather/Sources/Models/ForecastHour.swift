//
// ForecastHour.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ForecastHour: Codable {
    /// Unix Timestamp
    public var ts: Double?
    /// Timestamp in local time
    public var timestampLocal: String?
    /// Timestamp UTC
    public var timestampUtc: String?
    /// Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)
    public var datetime: String?
    /// Accumulated snowfall since last forecast point - Default (mm)
    public var snow: Double?
    /// Snow depth - Default (mm)
    public var snowDepth: Double?
    /// Accumulated precipitation since last forecast point. Default (mm)
    public var precip: Double?
    /// Temperature - Default (C)
    public var temp: Double?
    /// Dewpoint - Default (C)
    public var dewpt: Double?
    /// Apparent Temperature - Default (C)
    public var appTemp: Double?
    /// Relative Humidity as a percentage (%)
    public var rh: Int?
    /// Cloud cover as a percentage (%)
    public var clouds: Int?
    public var weather: ForecastHourWeather?
    /// Mean Sea level pressure (mb)
    public var slp: Double?
    /// Pressure (mb)
    public var pres: Double?
    /// UV Index
    public var uv: Double?
    /// Estimated solar radiation (W/m^2)
    public var solarRad: Double?
    /// Global horizontal solar irradiance (W/m^2)
    public var ghi: Double?
    /// Diffuse normal solar irradiance (W/m^2)
    public var dhi: Double?
    /// Direct normal solar irradiance (W/m^2)
    public var dni: Double?
    /// Visibility - Default (KM)
    public var vis: Double?
    /// Part of day (d = day, n = night)
    public var pod: String?
    /// Chance of Precipitation as a percentage (%)
    public var pop: Double?
    /// Wind Speed - Default (m/s)
    public var windSpd: Double?
    /// Wind Gust Speed - Default (m/s)
    public var windGustSpd: Double?
    /// Wind direction
    public var windDir: Int?
    /// Cardinal wind direction
    public var windCdir: String?
    /// Cardinal wind direction (text)
    public var windCdirFull: String?

    public init(ts: Double? = nil, timestampLocal: String? = nil, timestampUtc: String? = nil, datetime: String? = nil, snow: Double? = nil, snowDepth: Double? = nil, precip: Double? = nil, temp: Double? = nil, dewpt: Double? = nil, appTemp: Double? = nil, rh: Int? = nil, clouds: Int? = nil, weather: ForecastHourWeather? = nil, slp: Double? = nil, pres: Double? = nil, uv: Double? = nil, solarRad: Double? = nil, ghi: Double? = nil, dhi: Double? = nil, dni: Double? = nil, vis: Double? = nil, pod: String? = nil, pop: Double? = nil, windSpd: Double? = nil, windGustSpd: Double? = nil, windDir: Int? = nil, windCdir: String? = nil, windCdirFull: String? = nil) {
        self.ts = ts
        self.timestampLocal = timestampLocal
        self.timestampUtc = timestampUtc
        self.datetime = datetime
        self.snow = snow
        self.snowDepth = snowDepth
        self.precip = precip
        self.temp = temp
        self.dewpt = dewpt
        self.appTemp = appTemp
        self.rh = rh
        self.clouds = clouds
        self.weather = weather
        self.slp = slp
        self.pres = pres
        self.uv = uv
        self.solarRad = solarRad
        self.ghi = ghi
        self.dhi = dhi
        self.dni = dni
        self.vis = vis
        self.pod = pod
        self.pop = pop
        self.windSpd = windSpd
        self.windGustSpd = windGustSpd
        self.windDir = windDir
        self.windCdir = windCdir
        self.windCdirFull = windCdirFull
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ts
        case timestampLocal = "timestamp_local"
        case timestampUtc = "timestamp_utc"
        case datetime
        case snow
        case snowDepth = "snow_depth"
        case precip
        case temp
        case dewpt
        case appTemp = "app_temp"
        case rh
        case clouds
        case weather
        case slp
        case pres
        case uv
        case solarRad = "solar_rad"
        case ghi
        case dhi
        case dni
        case vis
        case pod
        case pop
        case windSpd = "wind_spd"
        case windGustSpd = "wind_gust_spd"
        case windDir = "wind_dir"
        case windCdir = "wind_cdir"
        case windCdirFull = "wind_cdir_full"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        ts = try container.decodeIfPresent(Double.self, forKey: .ts)
        timestampLocal = try container.decodeIfPresent(String.self, forKey: .timestampLocal)
        timestampUtc = try container.decodeIfPresent(String.self, forKey: .timestampUtc)
        datetime = try container.decodeIfPresent(String.self, forKey: .datetime)
        snow = try container.decodeIfPresent(Double.self, forKey: .snow)
        snowDepth = try container.decodeIfPresent(Double.self, forKey: .snowDepth)
        precip = try container.decodeIfPresent(Double.self, forKey: .precip)
        temp = try container.decodeIfPresent(Double.self, forKey: .temp)
        dewpt = try container.decodeIfPresent(Double.self, forKey: .dewpt)
        appTemp = try container.decodeIfPresent(Double.self, forKey: .appTemp)
        rh = try container.decodeIfPresent(Int.self, forKey: .rh)
        clouds = try container.decodeIfPresent(Int.self, forKey: .clouds)
        weather = try container.decodeIfPresent(ForecastHourWeather.self, forKey: .weather)
        slp = try container.decodeIfPresent(Double.self, forKey: .slp)
        pres = try container.decodeIfPresent(Double.self, forKey: .pres)
        uv = try container.decodeIfPresent(Double.self, forKey: .uv)
        solarRad = try container.decodeIfPresent(Double.self, forKey: .solarRad)
        ghi = try container.decodeIfPresent(Double.self, forKey: .ghi)
        dhi = try container.decodeIfPresent(Double.self, forKey: .dhi)
        dni = try container.decodeIfPresent(Double.self, forKey: .dni)
        vis = try container.decodeIfPresent(Double.self, forKey: .vis)
        pod = try container.decodeIfPresent(String.self, forKey: .pod)
        pop = try container.decodeIfPresent(Double.self, forKey: .pop)
        windSpd = try container.decodeIfPresent(Double.self, forKey: .windSpd)
        windGustSpd = try container.decodeIfPresent(Double.self, forKey: .windGustSpd)
        windDir = try container.decodeIfPresent(Int.self, forKey: .windDir)
        windCdir = try container.decodeIfPresent(String.self, forKey: .windCdir)
        windCdirFull = try container.decodeIfPresent(String.self, forKey: .windCdirFull)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ts, forKey: .ts)
        try container.encodeIfPresent(timestampLocal, forKey: .timestampLocal)
        try container.encodeIfPresent(timestampUtc, forKey: .timestampUtc)
        try container.encodeIfPresent(datetime, forKey: .datetime)
        try container.encodeIfPresent(snow, forKey: .snow)
        try container.encodeIfPresent(snowDepth, forKey: .snowDepth)
        try container.encodeIfPresent(precip, forKey: .precip)
        try container.encodeIfPresent(temp, forKey: .temp)
        try container.encodeIfPresent(dewpt, forKey: .dewpt)
        try container.encodeIfPresent(appTemp, forKey: .appTemp)
        try container.encodeIfPresent(rh, forKey: .rh)
        try container.encodeIfPresent(clouds, forKey: .clouds)
        try container.encodeIfPresent(weather, forKey: .weather)
        try container.encodeIfPresent(slp, forKey: .slp)
        try container.encodeIfPresent(pres, forKey: .pres)
        try container.encodeIfPresent(uv, forKey: .uv)
        try container.encodeIfPresent(solarRad, forKey: .solarRad)
        try container.encodeIfPresent(ghi, forKey: .ghi)
        try container.encodeIfPresent(dhi, forKey: .dhi)
        try container.encodeIfPresent(dni, forKey: .dni)
        try container.encodeIfPresent(vis, forKey: .vis)
        try container.encodeIfPresent(pod, forKey: .pod)
        try container.encodeIfPresent(pop, forKey: .pop)
        try container.encodeIfPresent(windSpd, forKey: .windSpd)
        try container.encodeIfPresent(windGustSpd, forKey: .windGustSpd)
        try container.encodeIfPresent(windDir, forKey: .windDir)
        try container.encodeIfPresent(windCdir, forKey: .windCdir)
        try container.encodeIfPresent(windCdirFull, forKey: .windCdirFull)
    }
}
