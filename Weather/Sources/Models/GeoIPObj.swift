//
// GeoIPObj.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct GeoIPObj: Codable {
    /// City Name
    public var longitude: String?
    /// State Abbreviation
    public var latitude: String?
    /// UTC Offset (deprecated)
    public var offset: String?
    /// Local IANA time zone
    public var timezone: String?
    /// Organization Name
    public var organization: String?
    /// Country Abbreviation
    public var continentCode: String?
    /// Latitude
    public var region: String?
    /// Longitude
    public var metroCode: String?
    /// Longitude
    public var dmaCode: String?
    /// IP Address
    public var ip: String?
    /// Country Code (Short)
    public var countryCode: String?
    /// Area Code
    public var areaCode: String?
    /// Postal Code
    public var postalCode: String?
    /// Character encoding
    public var charset: String?
    /// City Name
    public var city: String?
    /// Country Code (Long)
    public var countryCode3: String?

    public init(longitude: String? = nil, latitude: String? = nil, offset: String? = nil, timezone: String? = nil, organization: String? = nil, continentCode: String? = nil, region: String? = nil, metroCode: String? = nil, dmaCode: String? = nil, ip: String? = nil, countryCode: String? = nil, areaCode: String? = nil, postalCode: String? = nil, charset: String? = nil, city: String? = nil, countryCode3: String? = nil) {
        self.longitude = longitude
        self.latitude = latitude
        self.offset = offset
        self.timezone = timezone
        self.organization = organization
        self.continentCode = continentCode
        self.region = region
        self.metroCode = metroCode
        self.dmaCode = dmaCode
        self.ip = ip
        self.countryCode = countryCode
        self.areaCode = areaCode
        self.postalCode = postalCode
        self.charset = charset
        self.city = city
        self.countryCode3 = countryCode3
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case longitude
        case latitude
        case offset
        case timezone
        case organization
        case continentCode = "continent_code"
        case region
        case metroCode = "metro_code"
        case dmaCode = "dma_code"
        case ip
        case countryCode = "country_code"
        case areaCode = "area_code"
        case postalCode = "postal_code"
        case charset
        case city
        case countryCode3 = "country_code3"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        longitude = try container.decodeIfPresent(String.self, forKey: .longitude)
        latitude = try container.decodeIfPresent(String.self, forKey: .latitude)
        offset = try container.decodeIfPresent(String.self, forKey: .offset)
        timezone = try container.decodeIfPresent(String.self, forKey: .timezone)
        organization = try container.decodeIfPresent(String.self, forKey: .organization)
        continentCode = try container.decodeIfPresent(String.self, forKey: .continentCode)
        region = try container.decodeIfPresent(String.self, forKey: .region)
        metroCode = try container.decodeIfPresent(String.self, forKey: .metroCode)
        dmaCode = try container.decodeIfPresent(String.self, forKey: .dmaCode)
        ip = try container.decodeIfPresent(String.self, forKey: .ip)
        countryCode = try container.decodeIfPresent(String.self, forKey: .countryCode)
        areaCode = try container.decodeIfPresent(String.self, forKey: .areaCode)
        postalCode = try container.decodeIfPresent(String.self, forKey: .postalCode)
        charset = try container.decodeIfPresent(String.self, forKey: .charset)
        city = try container.decodeIfPresent(String.self, forKey: .city)
        countryCode3 = try container.decodeIfPresent(String.self, forKey: .countryCode3)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(offset, forKey: .offset)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(organization, forKey: .organization)
        try container.encodeIfPresent(continentCode, forKey: .continentCode)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(metroCode, forKey: .metroCode)
        try container.encodeIfPresent(dmaCode, forKey: .dmaCode)
        try container.encodeIfPresent(ip, forKey: .ip)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(areaCode, forKey: .areaCode)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(charset, forKey: .charset)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(countryCode3, forKey: .countryCode3)
    }
}
