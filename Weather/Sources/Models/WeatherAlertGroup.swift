//
// WeatherAlertGroup.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct WeatherAlertGroup: Codable {
    /// Brief description of weather alert
    public var title: String?
    /// Full description of weather alert
    public var description: String?
    /// Severity of weather. (Advisory | Watch | Warning)
    public var severity: String?
    /// Issued time UTC
    public var effectiveUtc: String?
    /// Issued time local
    public var effectiveLocal: String?
    /// Expiration time UTC
    public var expiresUtc: String?
    /// Expiration time local
    public var expiresLocal: String?
    /// URI to weather alert
    public var uri: String?
    public var alerts: [String]?

    public init(title: String? = nil, description: String? = nil, severity: String? = nil, effectiveUtc: String? = nil, effectiveLocal: String? = nil, expiresUtc: String? = nil, expiresLocal: String? = nil, uri: String? = nil, alerts: [String]? = nil) {
        self.title = title
        self.description = description
        self.severity = severity
        self.effectiveUtc = effectiveUtc
        self.effectiveLocal = effectiveLocal
        self.expiresUtc = expiresUtc
        self.expiresLocal = expiresLocal
        self.uri = uri
        self.alerts = alerts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case description
        case severity
        case effectiveUtc = "effective_utc"
        case effectiveLocal = "effective_local"
        case expiresUtc = "expires_utc"
        case expiresLocal = "expires_local"
        case uri
        case alerts
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        title = try container.decodeIfPresent(String.self, forKey: .title)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        severity = try container.decodeIfPresent(String.self, forKey: .severity)
        effectiveUtc = try container.decodeIfPresent(String.self, forKey: .effectiveUtc)
        effectiveLocal = try container.decodeIfPresent(String.self, forKey: .effectiveLocal)
        expiresUtc = try container.decodeIfPresent(String.self, forKey: .expiresUtc)
        expiresLocal = try container.decodeIfPresent(String.self, forKey: .expiresLocal)
        uri = try container.decodeIfPresent(String.self, forKey: .uri)
        alerts = try container.decodeIfPresent([String].self, forKey: .alerts)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(severity, forKey: .severity)
        try container.encodeIfPresent(effectiveUtc, forKey: .effectiveUtc)
        try container.encodeIfPresent(effectiveLocal, forKey: .effectiveLocal)
        try container.encodeIfPresent(expiresUtc, forKey: .expiresUtc)
        try container.encodeIfPresent(expiresLocal, forKey: .expiresLocal)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(alerts, forKey: .alerts)
    }
}
