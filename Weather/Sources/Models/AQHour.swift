//
// AQHour.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AQHour: Codable {
    /// Unix Timestamp
    public var ts: Double?
    /// Timestamp in local time
    public var timestampLocal: String?
    /// Timestamp UTC
    public var timestampUtc: String?
    /// Cloud cover as a percentage (%)
    public var aqi: Int?
    /// Concentration of SO2 (Âµg/mÂ³)
    public var so2: Double?
    /// Concentration of NO2 (Âµg/mÂ³)
    public var no2: Double?
    /// Concentration of O3 (Âµg/mÂ³)
    public var o3: Double?
    /// Concentration of PM 2.5 (Âµg/mÂ³)
    public var pm25: Double?
    /// Concentration of PM 10 (Âµg/mÂ³)
    public var pm10: Double?

    public init(ts: Double? = nil, timestampLocal: String? = nil, timestampUtc: String? = nil, aqi: Int? = nil, so2: Double? = nil, no2: Double? = nil, o3: Double? = nil, pm25: Double? = nil, pm10: Double? = nil) {
        self.ts = ts
        self.timestampLocal = timestampLocal
        self.timestampUtc = timestampUtc
        self.aqi = aqi
        self.so2 = so2
        self.no2 = no2
        self.o3 = o3
        self.pm25 = pm25
        self.pm10 = pm10
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ts
        case timestampLocal = "timestamp_local"
        case timestampUtc = "timestamp_utc"
        case aqi
        case so2
        case no2
        case o3
        case pm25
        case pm10
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        ts = try container.decodeIfPresent(Double.self, forKey: .ts)
        timestampLocal = try container.decodeIfPresent(String.self, forKey: .timestampLocal)
        timestampUtc = try container.decodeIfPresent(String.self, forKey: .timestampUtc)
        aqi = try container.decodeIfPresent(Int.self, forKey: .aqi)
        so2 = try container.decodeIfPresent(Double.self, forKey: .so2)
        no2 = try container.decodeIfPresent(Double.self, forKey: .no2)
        o3 = try container.decodeIfPresent(Double.self, forKey: .o3)
        pm25 = try container.decodeIfPresent(Double.self, forKey: .pm25)
        pm10 = try container.decodeIfPresent(Double.self, forKey: .pm10)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ts, forKey: .ts)
        try container.encodeIfPresent(timestampLocal, forKey: .timestampLocal)
        try container.encodeIfPresent(timestampUtc, forKey: .timestampUtc)
        try container.encodeIfPresent(aqi, forKey: .aqi)
        try container.encodeIfPresent(so2, forKey: .so2)
        try container.encodeIfPresent(no2, forKey: .no2)
        try container.encodeIfPresent(o3, forKey: .o3)
        try container.encodeIfPresent(pm25, forKey: .pm25)
        try container.encodeIfPresent(pm10, forKey: .pm10)
    }
}
