//
// HistoryDayObj.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct HistoryDayObj: Codable {
    /// Date in format \"YYYY-MM-DD\". All datetime is in (UTC)
    public var datetime: String?
    /// Unix timestamp of datetime (Midnight UTC)
    public var ts: Int?
    /// Data revision status (interim or final)
    public var revisionStatus: String?
    /// Average sea level pressure (mb)
    public var slp: Double?
    /// Average pressure (mb)
    public var pres: Double?
    /// Average relative humidity as a percentage (%)
    public var rh: Int?
    /// Average dewpoint - Default (C)
    public var dewpt: Double?
    /// Average temperature - Default (C)
    public var temp: Double?
    /// Max temperature - Default (C)
    public var maxTemp: Double?
    /// Time of max memperature - Unix Timestamp
    public var maxTempTs: Double?
    /// Min temperature - Default (C)
    public var minTemp: Double?
    /// Time of max temperature - unix timestamp
    public var minTempTs: Double?
    /// Average wind speed - default (m/s)
    public var windSpd: Double?
    /// Average wind direction (degrees)
    public var windDir: Int?
    /// Wind gust speed - default (m/s)
    public var windGustSpd: Double?
    /// Max 2min Wind Speed - default (m/s)
    public var maxWindSpd: Double?
    /// Direction of wind at time of max 2min wind (degrees)
    public var maxWindDir: Int?
    /// Time of max 2min wind - unix timestamp
    public var maxWindSpdTs: Double?
    /// Average hourly global horizontal solar irradiance (W/m^2)
    public var ghi: Int?
    /// Total global horizontal solar irradiance (W/m^2)
    public var tGhi: Int?
    /// Average direct normal solar irradiance (W/m^2)
    public var dni: Int?
    /// Total direct normal solar irradiance (W/m^2)
    public var tDni: Int?
    /// Average hourly diffuse horizontal solar irradiance (W/m^2)
    public var dhi: Int?
    /// Total diffuse horizontal solar irradiance (W/m^2)
    public var tDhi: Int?
    /// Max UV Index (1-11+)
    public var maxUv: Double?
    /// Liquid equivalent precipitation - default (mm)
    public var precip: Double?
    /// Satellite estimated liquid equivalent precipitation - default (mm)
    public var precipGpm: Double?
    /// Snowfall - default (mm)
    public var snow: Double?
    /// Snow Depth - default (mm)
    public var snowDepth: Double?

    public init(datetime: String? = nil, ts: Int? = nil, revisionStatus: String? = nil, slp: Double? = nil, pres: Double? = nil, rh: Int? = nil, dewpt: Double? = nil, temp: Double? = nil, maxTemp: Double? = nil, maxTempTs: Double? = nil, minTemp: Double? = nil, minTempTs: Double? = nil, windSpd: Double? = nil, windDir: Int? = nil, windGustSpd: Double? = nil, maxWindSpd: Double? = nil, maxWindDir: Int? = nil, maxWindSpdTs: Double? = nil, ghi: Int? = nil, tGhi: Int? = nil, dni: Int? = nil, tDni: Int? = nil, dhi: Int? = nil, tDhi: Int? = nil, maxUv: Double? = nil, precip: Double? = nil, precipGpm: Double? = nil, snow: Double? = nil, snowDepth: Double? = nil) {
        self.datetime = datetime
        self.ts = ts
        self.revisionStatus = revisionStatus
        self.slp = slp
        self.pres = pres
        self.rh = rh
        self.dewpt = dewpt
        self.temp = temp
        self.maxTemp = maxTemp
        self.maxTempTs = maxTempTs
        self.minTemp = minTemp
        self.minTempTs = minTempTs
        self.windSpd = windSpd
        self.windDir = windDir
        self.windGustSpd = windGustSpd
        self.maxWindSpd = maxWindSpd
        self.maxWindDir = maxWindDir
        self.maxWindSpdTs = maxWindSpdTs
        self.ghi = ghi
        self.tGhi = tGhi
        self.dni = dni
        self.tDni = tDni
        self.dhi = dhi
        self.tDhi = tDhi
        self.maxUv = maxUv
        self.precip = precip
        self.precipGpm = precipGpm
        self.snow = snow
        self.snowDepth = snowDepth
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case datetime
        case ts
        case revisionStatus = "revision_status"
        case slp
        case pres
        case rh
        case dewpt
        case temp
        case maxTemp = "max_temp"
        case maxTempTs = "max_temp_ts"
        case minTemp = "min_temp"
        case minTempTs = "min_temp_ts"
        case windSpd = "wind_spd"
        case windDir = "wind_dir"
        case windGustSpd = "wind_gust_spd"
        case maxWindSpd = "max_wind_spd"
        case maxWindDir = "max_wind_dir"
        case maxWindSpdTs = "max_wind_spd_ts"
        case ghi
        case tGhi = "t_ghi"
        case dni
        case tDni = "t_dni"
        case dhi
        case tDhi = "t_dhi"
        case maxUv = "max_uv"
        case precip
        case precipGpm = "precip_gpm"
        case snow
        case snowDepth = "snow_depth"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        datetime = try container.decodeIfPresent(String.self, forKey: .datetime)
        ts = try container.decodeIfPresent(Int.self, forKey: .ts)
        revisionStatus = try container.decodeIfPresent(String.self, forKey: .revisionStatus)
        slp = try container.decodeIfPresent(Double.self, forKey: .slp)
        pres = try container.decodeIfPresent(Double.self, forKey: .pres)
        rh = try container.decodeIfPresent(Int.self, forKey: .rh)
        dewpt = try container.decodeIfPresent(Double.self, forKey: .dewpt)
        temp = try container.decodeIfPresent(Double.self, forKey: .temp)
        maxTemp = try container.decodeIfPresent(Double.self, forKey: .maxTemp)
        maxTempTs = try container.decodeIfPresent(Double.self, forKey: .maxTempTs)
        minTemp = try container.decodeIfPresent(Double.self, forKey: .minTemp)
        minTempTs = try container.decodeIfPresent(Double.self, forKey: .minTempTs)
        windSpd = try container.decodeIfPresent(Double.self, forKey: .windSpd)
        windDir = try container.decodeIfPresent(Int.self, forKey: .windDir)
        windGustSpd = try container.decodeIfPresent(Double.self, forKey: .windGustSpd)
        maxWindSpd = try container.decodeIfPresent(Double.self, forKey: .maxWindSpd)
        maxWindDir = try container.decodeIfPresent(Int.self, forKey: .maxWindDir)
        maxWindSpdTs = try container.decodeIfPresent(Double.self, forKey: .maxWindSpdTs)
        ghi = try container.decodeIfPresent(Int.self, forKey: .ghi)
        tGhi = try container.decodeIfPresent(Int.self, forKey: .tGhi)
        dni = try container.decodeIfPresent(Int.self, forKey: .dni)
        tDni = try container.decodeIfPresent(Int.self, forKey: .tDni)
        dhi = try container.decodeIfPresent(Int.self, forKey: .dhi)
        tDhi = try container.decodeIfPresent(Int.self, forKey: .tDhi)
        maxUv = try container.decodeIfPresent(Double.self, forKey: .maxUv)
        precip = try container.decodeIfPresent(Double.self, forKey: .precip)
        precipGpm = try container.decodeIfPresent(Double.self, forKey: .precipGpm)
        snow = try container.decodeIfPresent(Double.self, forKey: .snow)
        snowDepth = try container.decodeIfPresent(Double.self, forKey: .snowDepth)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(datetime, forKey: .datetime)
        try container.encodeIfPresent(ts, forKey: .ts)
        try container.encodeIfPresent(revisionStatus, forKey: .revisionStatus)
        try container.encodeIfPresent(slp, forKey: .slp)
        try container.encodeIfPresent(pres, forKey: .pres)
        try container.encodeIfPresent(rh, forKey: .rh)
        try container.encodeIfPresent(dewpt, forKey: .dewpt)
        try container.encodeIfPresent(temp, forKey: .temp)
        try container.encodeIfPresent(maxTemp, forKey: .maxTemp)
        try container.encodeIfPresent(maxTempTs, forKey: .maxTempTs)
        try container.encodeIfPresent(minTemp, forKey: .minTemp)
        try container.encodeIfPresent(minTempTs, forKey: .minTempTs)
        try container.encodeIfPresent(windSpd, forKey: .windSpd)
        try container.encodeIfPresent(windDir, forKey: .windDir)
        try container.encodeIfPresent(windGustSpd, forKey: .windGustSpd)
        try container.encodeIfPresent(maxWindSpd, forKey: .maxWindSpd)
        try container.encodeIfPresent(maxWindDir, forKey: .maxWindDir)
        try container.encodeIfPresent(maxWindSpdTs, forKey: .maxWindSpdTs)
        try container.encodeIfPresent(ghi, forKey: .ghi)
        try container.encodeIfPresent(tGhi, forKey: .tGhi)
        try container.encodeIfPresent(dni, forKey: .dni)
        try container.encodeIfPresent(tDni, forKey: .tDni)
        try container.encodeIfPresent(dhi, forKey: .dhi)
        try container.encodeIfPresent(tDhi, forKey: .tDhi)
        try container.encodeIfPresent(maxUv, forKey: .maxUv)
        try container.encodeIfPresent(precip, forKey: .precip)
        try container.encodeIfPresent(precipGpm, forKey: .precipGpm)
        try container.encodeIfPresent(snow, forKey: .snow)
        try container.encodeIfPresent(snowDepth, forKey: .snowDepth)
    }
}
