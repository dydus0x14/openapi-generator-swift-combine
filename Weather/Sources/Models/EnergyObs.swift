//
// EnergyObs.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct EnergyObs: Codable {
    /// City name (closest)
    public var cityName: String?
    /// State abbreviation
    public var stateCode: String?
    /// Country abbreviation
    public var countryCode: String?
    /// Local IANA time zone
    public var timezone: String?
    /// Latitude
    public var lat: String?
    /// Longitude
    public var lon: String?
    /// Nearest Station ID [DEPRECATED]
    public var stationId: String?
    /// List of data sources used in response
    public var sources: [String]?
    /// Cooling degree days
    public var cdd: Double?
    /// Heating degree days
    public var hdd: Double?
    /// Average Relative humidity (%)
    public var rh: Int?
    /// Average dew point temperature - Default (C)
    public var dewpt: Double?
    /// Average wind direction (Degrees)
    public var windDir: Int?
    /// Average wind speed - Default (m/s)
    public var windSpd: Double?
    /// Average temperature - Default (C)
    public var temp: Double?
    /// Average cloud cover (%)
    public var clouds: Int?
    /// Total global horizontal solar irradiance (W/m^2)
    public var tGhi: Double?
    /// Total diffuse horizontal solar irradiance (W/m^2)
    public var tDhi: Double?
    /// Total direct normal solar irradiance (W/m^2)
    public var tDni: Double?
    /// Average number of daily sun hours - # hours where Solar GHI > 1000 W/m^2
    public var sunHours: Double?
    /// Total precipitation in period - Default (mm)
    public var precip: Double?
    /// Total snowfall in period - Default (mm)
    public var snow: Double?

    public init(cityName: String? = nil, stateCode: String? = nil, countryCode: String? = nil, timezone: String? = nil, lat: String? = nil, lon: String? = nil, stationId: String? = nil, sources: [String]? = nil, cdd: Double? = nil, hdd: Double? = nil, rh: Int? = nil, dewpt: Double? = nil, windDir: Int? = nil, windSpd: Double? = nil, temp: Double? = nil, clouds: Int? = nil, tGhi: Double? = nil, tDhi: Double? = nil, tDni: Double? = nil, sunHours: Double? = nil, precip: Double? = nil, snow: Double? = nil) {
        self.cityName = cityName
        self.stateCode = stateCode
        self.countryCode = countryCode
        self.timezone = timezone
        self.lat = lat
        self.lon = lon
        self.stationId = stationId
        self.sources = sources
        self.cdd = cdd
        self.hdd = hdd
        self.rh = rh
        self.dewpt = dewpt
        self.windDir = windDir
        self.windSpd = windSpd
        self.temp = temp
        self.clouds = clouds
        self.tGhi = tGhi
        self.tDhi = tDhi
        self.tDni = tDni
        self.sunHours = sunHours
        self.precip = precip
        self.snow = snow
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cityName = "city_name"
        case stateCode = "state_code"
        case countryCode = "country_code"
        case timezone
        case lat
        case lon
        case stationId = "station_id"
        case sources
        case cdd
        case hdd
        case rh
        case dewpt
        case windDir = "wind_dir"
        case windSpd = "wind_spd"
        case temp
        case clouds
        case tGhi = "t_ghi"
        case tDhi = "t_dhi"
        case tDni = "t_dni"
        case sunHours = "sun_hours"
        case precip
        case snow
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        cityName = try container.decodeIfPresent(String.self, forKey: .cityName)
        stateCode = try container.decodeIfPresent(String.self, forKey: .stateCode)
        countryCode = try container.decodeIfPresent(String.self, forKey: .countryCode)
        timezone = try container.decodeIfPresent(String.self, forKey: .timezone)
        lat = try container.decodeIfPresent(String.self, forKey: .lat)
        lon = try container.decodeIfPresent(String.self, forKey: .lon)
        stationId = try container.decodeIfPresent(String.self, forKey: .stationId)
        sources = try container.decodeIfPresent([String].self, forKey: .sources)
        cdd = try container.decodeIfPresent(Double.self, forKey: .cdd)
        hdd = try container.decodeIfPresent(Double.self, forKey: .hdd)
        rh = try container.decodeIfPresent(Int.self, forKey: .rh)
        dewpt = try container.decodeIfPresent(Double.self, forKey: .dewpt)
        windDir = try container.decodeIfPresent(Int.self, forKey: .windDir)
        windSpd = try container.decodeIfPresent(Double.self, forKey: .windSpd)
        temp = try container.decodeIfPresent(Double.self, forKey: .temp)
        clouds = try container.decodeIfPresent(Int.self, forKey: .clouds)
        tGhi = try container.decodeIfPresent(Double.self, forKey: .tGhi)
        tDhi = try container.decodeIfPresent(Double.self, forKey: .tDhi)
        tDni = try container.decodeIfPresent(Double.self, forKey: .tDni)
        sunHours = try container.decodeIfPresent(Double.self, forKey: .sunHours)
        precip = try container.decodeIfPresent(Double.self, forKey: .precip)
        snow = try container.decodeIfPresent(Double.self, forKey: .snow)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cityName, forKey: .cityName)
        try container.encodeIfPresent(stateCode, forKey: .stateCode)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(lat, forKey: .lat)
        try container.encodeIfPresent(lon, forKey: .lon)
        try container.encodeIfPresent(stationId, forKey: .stationId)
        try container.encodeIfPresent(sources, forKey: .sources)
        try container.encodeIfPresent(cdd, forKey: .cdd)
        try container.encodeIfPresent(hdd, forKey: .hdd)
        try container.encodeIfPresent(rh, forKey: .rh)
        try container.encodeIfPresent(dewpt, forKey: .dewpt)
        try container.encodeIfPresent(windDir, forKey: .windDir)
        try container.encodeIfPresent(windSpd, forKey: .windSpd)
        try container.encodeIfPresent(temp, forKey: .temp)
        try container.encodeIfPresent(clouds, forKey: .clouds)
        try container.encodeIfPresent(tGhi, forKey: .tGhi)
        try container.encodeIfPresent(tDhi, forKey: .tDhi)
        try container.encodeIfPresent(tDni, forKey: .tDni)
        try container.encodeIfPresent(sunHours, forKey: .sunHours)
        try container.encodeIfPresent(precip, forKey: .precip)
        try container.encodeIfPresent(snow, forKey: .snow)
    }
}
