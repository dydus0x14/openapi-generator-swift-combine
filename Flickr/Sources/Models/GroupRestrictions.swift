//
// GroupRestrictions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct GroupRestrictions: Codable {
    public var photosOk: Bool?
    public var videosOk: Bool?
    public var imagesOk: Bool?
    public var screensOk: Bool?
    public var artOk: Bool?
    public var safeOk: Bool?
    public var moderateOk: Bool?
    public var restrictedOk: Bool?
    public var hasGeo: Bool?

    public init(photosOk: Bool? = nil, videosOk: Bool? = nil, imagesOk: Bool? = nil, screensOk: Bool? = nil, artOk: Bool? = nil, safeOk: Bool? = nil, moderateOk: Bool? = nil, restrictedOk: Bool? = nil, hasGeo: Bool? = nil) {
        self.photosOk = photosOk
        self.videosOk = videosOk
        self.imagesOk = imagesOk
        self.screensOk = screensOk
        self.artOk = artOk
        self.safeOk = safeOk
        self.moderateOk = moderateOk
        self.restrictedOk = restrictedOk
        self.hasGeo = hasGeo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case photosOk = "photos_ok"
        case videosOk = "videos_ok"
        case imagesOk = "images_ok"
        case screensOk = "screens_ok"
        case artOk = "art_ok"
        case safeOk = "safe_ok"
        case moderateOk = "moderate_ok"
        case restrictedOk = "restricted_ok"
        case hasGeo = "has_geo"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        photosOk = try container.decodeIfPresent(Bool.self, forKey: .photosOk)
        videosOk = try container.decodeIfPresent(Bool.self, forKey: .videosOk)
        imagesOk = try container.decodeIfPresent(Bool.self, forKey: .imagesOk)
        screensOk = try container.decodeIfPresent(Bool.self, forKey: .screensOk)
        artOk = try container.decodeIfPresent(Bool.self, forKey: .artOk)
        safeOk = try container.decodeIfPresent(Bool.self, forKey: .safeOk)
        moderateOk = try container.decodeIfPresent(Bool.self, forKey: .moderateOk)
        restrictedOk = try container.decodeIfPresent(Bool.self, forKey: .restrictedOk)
        hasGeo = try container.decodeIfPresent(Bool.self, forKey: .hasGeo)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(photosOk, forKey: .photosOk)
        try container.encodeIfPresent(videosOk, forKey: .videosOk)
        try container.encodeIfPresent(imagesOk, forKey: .imagesOk)
        try container.encodeIfPresent(screensOk, forKey: .screensOk)
        try container.encodeIfPresent(artOk, forKey: .artOk)
        try container.encodeIfPresent(safeOk, forKey: .safeOk)
        try container.encodeIfPresent(moderateOk, forKey: .moderateOk)
        try container.encodeIfPresent(restrictedOk, forKey: .restrictedOk)
        try container.encodeIfPresent(hasGeo, forKey: .hasGeo)
    }
}
