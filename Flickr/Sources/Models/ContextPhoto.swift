//
// ContextPhoto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ContextPhoto: Codable {
    public var id: String?
    public var secret: String?
    public var server: String?
    public var farm: String?
    public var title: String?
    public var url: String?
    public var thumb: String?
    public var media: String?
    public var owner: String?
    public var license: Int?
    public var safe: Bool?
    public var isFaved: Bool?

    public init(id: String? = nil, secret: String? = nil, server: String? = nil, farm: String? = nil, title: String? = nil, url: String? = nil, thumb: String? = nil, media: String? = nil, owner: String? = nil, license: Int? = nil, safe: Bool? = nil, isFaved: Bool? = nil) {
        self.id = id
        self.secret = secret
        self.server = server
        self.farm = farm
        self.title = title
        self.url = url
        self.thumb = thumb
        self.media = media
        self.owner = owner
        self.license = license
        self.safe = safe
        self.isFaved = isFaved
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case secret
        case server
        case farm
        case title
        case url
        case thumb
        case media
        case owner
        case license
        case safe
        case isFaved = "is_faved"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(String.self, forKey: .id)
        secret = try container.decodeIfPresent(String.self, forKey: .secret)
        server = try container.decodeIfPresent(String.self, forKey: .server)
        farm = try container.decodeIfPresent(String.self, forKey: .farm)
        title = try container.decodeIfPresent(String.self, forKey: .title)
        url = try container.decodeIfPresent(String.self, forKey: .url)
        thumb = try container.decodeIfPresent(String.self, forKey: .thumb)
        media = try container.decodeIfPresent(String.self, forKey: .media)
        owner = try container.decodeIfPresent(String.self, forKey: .owner)
        license = try container.decodeIfPresent(Int.self, forKey: .license)
        safe = try container.decodeIfPresent(Bool.self, forKey: .safe)
        isFaved = try container.decodeIfPresent(Bool.self, forKey: .isFaved)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(server, forKey: .server)
        try container.encodeIfPresent(farm, forKey: .farm)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(thumb, forKey: .thumb)
        try container.encodeIfPresent(media, forKey: .media)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(license, forKey: .license)
        try container.encodeIfPresent(safe, forKey: .safe)
        try container.encodeIfPresent(isFaved, forKey: .isFaved)
    }
}
