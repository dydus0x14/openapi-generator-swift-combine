//
// Photo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Photo: Codable {
    public var id: String?
    public var secret: String?
    public var server: String?
    public var farm: String?
    public var dateuploaded: String?
    public var isfavorite: Bool?
    public var license: String?
    public var safetyLevel: String?
    public var rotation: String?
    public var originalsecret: String?
    public var owner: Owner?
    public var title: GetFavoritesContextByID200ResponseCount?
    public var description: GetFavoritesContextByID200ResponseCount?
    public var visibility: PhotoVisibility?
    public var dates: PhotoDates?
    public var permissions: PhotoPermissions?
    public var views: String?
    public var editability: PhotoEditability?
    public var publiceditability: PhotoEditability?
    public var usage: PhotoUsage?
    public var comments: GetFavoritesContextByID200ResponseCount?
    public var notes: PhotoNotes?
    public var people: PhotoPeople?
    public var tags: PhotoTags?
    public var urls: PhotoUrls?
    public var safe: Bool?
    public var media: String?

    public init(id: String? = nil, secret: String? = nil, server: String? = nil, farm: String? = nil, dateuploaded: String? = nil, isfavorite: Bool? = nil, license: String? = nil, safetyLevel: String? = nil, rotation: String? = nil, originalsecret: String? = nil, owner: Owner? = nil, title: GetFavoritesContextByID200ResponseCount? = nil, description: GetFavoritesContextByID200ResponseCount? = nil, visibility: PhotoVisibility? = nil, dates: PhotoDates? = nil, permissions: PhotoPermissions? = nil, views: String? = nil, editability: PhotoEditability? = nil, publiceditability: PhotoEditability? = nil, usage: PhotoUsage? = nil, comments: GetFavoritesContextByID200ResponseCount? = nil, notes: PhotoNotes? = nil, people: PhotoPeople? = nil, tags: PhotoTags? = nil, urls: PhotoUrls? = nil, safe: Bool? = nil, media: String? = nil) {
        self.id = id
        self.secret = secret
        self.server = server
        self.farm = farm
        self.dateuploaded = dateuploaded
        self.isfavorite = isfavorite
        self.license = license
        self.safetyLevel = safetyLevel
        self.rotation = rotation
        self.originalsecret = originalsecret
        self.owner = owner
        self.title = title
        self.description = description
        self.visibility = visibility
        self.dates = dates
        self.permissions = permissions
        self.views = views
        self.editability = editability
        self.publiceditability = publiceditability
        self.usage = usage
        self.comments = comments
        self.notes = notes
        self.people = people
        self.tags = tags
        self.urls = urls
        self.safe = safe
        self.media = media
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case secret
        case server
        case farm
        case dateuploaded
        case isfavorite
        case license
        case safetyLevel = "safety_level"
        case rotation
        case originalsecret
        case owner
        case title
        case description
        case visibility
        case dates
        case permissions
        case views
        case editability
        case publiceditability
        case usage
        case comments
        case notes
        case people
        case tags
        case urls
        case safe
        case media
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(String.self, forKey: .id)
        secret = try container.decodeIfPresent(String.self, forKey: .secret)
        server = try container.decodeIfPresent(String.self, forKey: .server)
        farm = try container.decodeIfPresent(String.self, forKey: .farm)
        dateuploaded = try container.decodeIfPresent(String.self, forKey: .dateuploaded)
        isfavorite = try container.decodeIfPresent(Bool.self, forKey: .isfavorite)
        license = try container.decodeIfPresent(String.self, forKey: .license)
        safetyLevel = try container.decodeIfPresent(String.self, forKey: .safetyLevel)
        rotation = try container.decodeIfPresent(String.self, forKey: .rotation)
        originalsecret = try container.decodeIfPresent(String.self, forKey: .originalsecret)
        owner = try container.decodeIfPresent(Owner.self, forKey: .owner)
        title = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .title)
        description = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .description)
        visibility = try container.decodeIfPresent(PhotoVisibility.self, forKey: .visibility)
        dates = try container.decodeIfPresent(PhotoDates.self, forKey: .dates)
        permissions = try container.decodeIfPresent(PhotoPermissions.self, forKey: .permissions)
        views = try container.decodeIfPresent(String.self, forKey: .views)
        editability = try container.decodeIfPresent(PhotoEditability.self, forKey: .editability)
        publiceditability = try container.decodeIfPresent(PhotoEditability.self, forKey: .publiceditability)
        usage = try container.decodeIfPresent(PhotoUsage.self, forKey: .usage)
        comments = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .comments)
        notes = try container.decodeIfPresent(PhotoNotes.self, forKey: .notes)
        people = try container.decodeIfPresent(PhotoPeople.self, forKey: .people)
        tags = try container.decodeIfPresent(PhotoTags.self, forKey: .tags)
        urls = try container.decodeIfPresent(PhotoUrls.self, forKey: .urls)
        safe = try container.decodeIfPresent(Bool.self, forKey: .safe)
        media = try container.decodeIfPresent(String.self, forKey: .media)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(server, forKey: .server)
        try container.encodeIfPresent(farm, forKey: .farm)
        try container.encodeIfPresent(dateuploaded, forKey: .dateuploaded)
        try container.encodeIfPresent(isfavorite, forKey: .isfavorite)
        try container.encodeIfPresent(license, forKey: .license)
        try container.encodeIfPresent(safetyLevel, forKey: .safetyLevel)
        try container.encodeIfPresent(rotation, forKey: .rotation)
        try container.encodeIfPresent(originalsecret, forKey: .originalsecret)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(visibility, forKey: .visibility)
        try container.encodeIfPresent(dates, forKey: .dates)
        try container.encodeIfPresent(permissions, forKey: .permissions)
        try container.encodeIfPresent(views, forKey: .views)
        try container.encodeIfPresent(editability, forKey: .editability)
        try container.encodeIfPresent(publiceditability, forKey: .publiceditability)
        try container.encodeIfPresent(usage, forKey: .usage)
        try container.encodeIfPresent(comments, forKey: .comments)
        try container.encodeIfPresent(notes, forKey: .notes)
        try container.encodeIfPresent(people, forKey: .people)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(urls, forKey: .urls)
        try container.encodeIfPresent(safe, forKey: .safe)
        try container.encodeIfPresent(media, forKey: .media)
    }
}
