//
// Group.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Group: Codable {
    public var id: String?
    public var pathAlias: String?
    public var iconserver: String?
    public var iconfarm: String?
    public var name: GetFavoritesContextByID200ResponseCount?
    public var description: GetFavoritesContextByID200ResponseCount?
    public var rules: GetFavoritesContextByID200ResponseCount?
    public var members: GetFavoritesContextByID200ResponseCount?
    public var poolCount: GetFavoritesContextByID200ResponseCount?
    public var topicCount: GetFavoritesContextByID200ResponseCount?
    public var privacy: GetFavoritesContextByID200ResponseCount?
    public var lang: String?
    public var ispoolmoderated: Bool?
    public var roles: GroupRoles?
    public var poolRows: Int?
    public var coverphotoServer: String?
    public var coverphotoFarm: String?
    public var coverphotoUrl: PhotoUrls?
    public var isMember: Bool?
    public var isModerator: Bool?
    public var isAdmin: Bool?
    public var blast: GroupBlast?
    public var throttle: GroupThrottle?
    public var restrictions: GroupRestrictions?
    public var cover: Cover?

    public init(id: String? = nil, pathAlias: String? = nil, iconserver: String? = nil, iconfarm: String? = nil, name: GetFavoritesContextByID200ResponseCount? = nil, description: GetFavoritesContextByID200ResponseCount? = nil, rules: GetFavoritesContextByID200ResponseCount? = nil, members: GetFavoritesContextByID200ResponseCount? = nil, poolCount: GetFavoritesContextByID200ResponseCount? = nil, topicCount: GetFavoritesContextByID200ResponseCount? = nil, privacy: GetFavoritesContextByID200ResponseCount? = nil, lang: String? = nil, ispoolmoderated: Bool? = nil, roles: GroupRoles? = nil, poolRows: Int? = nil, coverphotoServer: String? = nil, coverphotoFarm: String? = nil, coverphotoUrl: PhotoUrls? = nil, isMember: Bool? = nil, isModerator: Bool? = nil, isAdmin: Bool? = nil, blast: GroupBlast? = nil, throttle: GroupThrottle? = nil, restrictions: GroupRestrictions? = nil, cover: Cover? = nil) {
        self.id = id
        self.pathAlias = pathAlias
        self.iconserver = iconserver
        self.iconfarm = iconfarm
        self.name = name
        self.description = description
        self.rules = rules
        self.members = members
        self.poolCount = poolCount
        self.topicCount = topicCount
        self.privacy = privacy
        self.lang = lang
        self.ispoolmoderated = ispoolmoderated
        self.roles = roles
        self.poolRows = poolRows
        self.coverphotoServer = coverphotoServer
        self.coverphotoFarm = coverphotoFarm
        self.coverphotoUrl = coverphotoUrl
        self.isMember = isMember
        self.isModerator = isModerator
        self.isAdmin = isAdmin
        self.blast = blast
        self.throttle = throttle
        self.restrictions = restrictions
        self.cover = cover
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case pathAlias = "path_alias"
        case iconserver
        case iconfarm
        case name
        case description
        case rules
        case members
        case poolCount = "pool_count"
        case topicCount = "topic_count"
        case privacy
        case lang
        case ispoolmoderated
        case roles
        case poolRows = "pool_rows"
        case coverphotoServer = "coverphoto_server"
        case coverphotoFarm = "coverphoto_farm"
        case coverphotoUrl = "coverphoto_url"
        case isMember = "is_member"
        case isModerator = "is_moderator"
        case isAdmin = "is_admin"
        case blast
        case throttle
        case restrictions
        case cover
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(String.self, forKey: .id)
        pathAlias = try container.decodeIfPresent(String.self, forKey: .pathAlias)
        iconserver = try container.decodeIfPresent(String.self, forKey: .iconserver)
        iconfarm = try container.decodeIfPresent(String.self, forKey: .iconfarm)
        name = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .name)
        description = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .description)
        rules = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .rules)
        members = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .members)
        poolCount = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .poolCount)
        topicCount = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .topicCount)
        privacy = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .privacy)
        lang = try container.decodeIfPresent(String.self, forKey: .lang)
        ispoolmoderated = try container.decodeIfPresent(Bool.self, forKey: .ispoolmoderated)
        roles = try container.decodeIfPresent(GroupRoles.self, forKey: .roles)
        poolRows = try container.decodeIfPresent(Int.self, forKey: .poolRows)
        coverphotoServer = try container.decodeIfPresent(String.self, forKey: .coverphotoServer)
        coverphotoFarm = try container.decodeIfPresent(String.self, forKey: .coverphotoFarm)
        coverphotoUrl = try container.decodeIfPresent(PhotoUrls.self, forKey: .coverphotoUrl)
        isMember = try container.decodeIfPresent(Bool.self, forKey: .isMember)
        isModerator = try container.decodeIfPresent(Bool.self, forKey: .isModerator)
        isAdmin = try container.decodeIfPresent(Bool.self, forKey: .isAdmin)
        blast = try container.decodeIfPresent(GroupBlast.self, forKey: .blast)
        throttle = try container.decodeIfPresent(GroupThrottle.self, forKey: .throttle)
        restrictions = try container.decodeIfPresent(GroupRestrictions.self, forKey: .restrictions)
        cover = try container.decodeIfPresent(Cover.self, forKey: .cover)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(pathAlias, forKey: .pathAlias)
        try container.encodeIfPresent(iconserver, forKey: .iconserver)
        try container.encodeIfPresent(iconfarm, forKey: .iconfarm)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(rules, forKey: .rules)
        try container.encodeIfPresent(members, forKey: .members)
        try container.encodeIfPresent(poolCount, forKey: .poolCount)
        try container.encodeIfPresent(topicCount, forKey: .topicCount)
        try container.encodeIfPresent(privacy, forKey: .privacy)
        try container.encodeIfPresent(lang, forKey: .lang)
        try container.encodeIfPresent(ispoolmoderated, forKey: .ispoolmoderated)
        try container.encodeIfPresent(roles, forKey: .roles)
        try container.encodeIfPresent(poolRows, forKey: .poolRows)
        try container.encodeIfPresent(coverphotoServer, forKey: .coverphotoServer)
        try container.encodeIfPresent(coverphotoFarm, forKey: .coverphotoFarm)
        try container.encodeIfPresent(coverphotoUrl, forKey: .coverphotoUrl)
        try container.encodeIfPresent(isMember, forKey: .isMember)
        try container.encodeIfPresent(isModerator, forKey: .isModerator)
        try container.encodeIfPresent(isAdmin, forKey: .isAdmin)
        try container.encodeIfPresent(blast, forKey: .blast)
        try container.encodeIfPresent(throttle, forKey: .throttle)
        try container.encodeIfPresent(restrictions, forKey: .restrictions)
        try container.encodeIfPresent(cover, forKey: .cover)
    }
}
