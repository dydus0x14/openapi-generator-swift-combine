//
// Owner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Owner: Codable {
    public var nsid: String?
    public var username: String?
    public var realname: String?
    public var location: String?
    public var iconserver: String?
    public var iconfarm: String?
    public var pathAlias: String?
    public var noindexfollow: Bool?
    public var ispro: Bool?
    public var isAdFree: Bool?

    public init(nsid: String? = nil, username: String? = nil, realname: String? = nil, location: String? = nil, iconserver: String? = nil, iconfarm: String? = nil, pathAlias: String? = nil, noindexfollow: Bool? = nil, ispro: Bool? = nil, isAdFree: Bool? = nil) {
        self.nsid = nsid
        self.username = username
        self.realname = realname
        self.location = location
        self.iconserver = iconserver
        self.iconfarm = iconfarm
        self.pathAlias = pathAlias
        self.noindexfollow = noindexfollow
        self.ispro = ispro
        self.isAdFree = isAdFree
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nsid
        case username
        case realname
        case location
        case iconserver
        case iconfarm
        case pathAlias = "path_alias"
        case noindexfollow
        case ispro
        case isAdFree = "is_ad_free"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        nsid = try container.decodeIfPresent(String.self, forKey: .nsid)
        username = try container.decodeIfPresent(String.self, forKey: .username)
        realname = try container.decodeIfPresent(String.self, forKey: .realname)
        location = try container.decodeIfPresent(String.self, forKey: .location)
        iconserver = try container.decodeIfPresent(String.self, forKey: .iconserver)
        iconfarm = try container.decodeIfPresent(String.self, forKey: .iconfarm)
        pathAlias = try container.decodeIfPresent(String.self, forKey: .pathAlias)
        noindexfollow = try container.decodeIfPresent(Bool.self, forKey: .noindexfollow)
        ispro = try container.decodeIfPresent(Bool.self, forKey: .ispro)
        isAdFree = try container.decodeIfPresent(Bool.self, forKey: .isAdFree)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(nsid, forKey: .nsid)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(realname, forKey: .realname)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(iconserver, forKey: .iconserver)
        try container.encodeIfPresent(iconfarm, forKey: .iconfarm)
        try container.encodeIfPresent(pathAlias, forKey: .pathAlias)
        try container.encodeIfPresent(noindexfollow, forKey: .noindexfollow)
        try container.encodeIfPresent(ispro, forKey: .ispro)
        try container.encodeIfPresent(isAdFree, forKey: .isAdFree)
    }
}
