//
// GetGroupDiscussionsByID200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct GetGroupDiscussionsByID200Response: Codable {
    public var iconserver: Double?
    public var iconfarm: Double?
    public var name: String?
    public var members: Double?
    public var privacy: Double?
    public var lang: String?
    public var ispoolmoderated: Bool?
    public var total: Double?
    public var page: Double?
    public var perPage: Double?
    public var pages: Double?
    public var topics: [Topic]?

    public init(iconserver: Double? = nil, iconfarm: Double? = nil, name: String? = nil, members: Double? = nil, privacy: Double? = nil, lang: String? = nil, ispoolmoderated: Bool? = nil, total: Double? = nil, page: Double? = nil, perPage: Double? = nil, pages: Double? = nil, topics: [Topic]? = nil) {
        self.iconserver = iconserver
        self.iconfarm = iconfarm
        self.name = name
        self.members = members
        self.privacy = privacy
        self.lang = lang
        self.ispoolmoderated = ispoolmoderated
        self.total = total
        self.page = page
        self.perPage = perPage
        self.pages = pages
        self.topics = topics
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case iconserver
        case iconfarm
        case name
        case members
        case privacy
        case lang
        case ispoolmoderated
        case total
        case page
        case perPage = "per_page"
        case pages
        case topics
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        iconserver = try container.decodeIfPresent(Double.self, forKey: .iconserver)
        iconfarm = try container.decodeIfPresent(Double.self, forKey: .iconfarm)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        members = try container.decodeIfPresent(Double.self, forKey: .members)
        privacy = try container.decodeIfPresent(Double.self, forKey: .privacy)
        lang = try container.decodeIfPresent(String.self, forKey: .lang)
        ispoolmoderated = try container.decodeIfPresent(Bool.self, forKey: .ispoolmoderated)
        total = try container.decodeIfPresent(Double.self, forKey: .total)
        page = try container.decodeIfPresent(Double.self, forKey: .page)
        perPage = try container.decodeIfPresent(Double.self, forKey: .perPage)
        pages = try container.decodeIfPresent(Double.self, forKey: .pages)
        topics = try container.decodeIfPresent([Topic].self, forKey: .topics)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(iconserver, forKey: .iconserver)
        try container.encodeIfPresent(iconfarm, forKey: .iconfarm)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(members, forKey: .members)
        try container.encodeIfPresent(privacy, forKey: .privacy)
        try container.encodeIfPresent(lang, forKey: .lang)
        try container.encodeIfPresent(ispoolmoderated, forKey: .ispoolmoderated)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(page, forKey: .page)
        try container.encodeIfPresent(perPage, forKey: .perPage)
        try container.encodeIfPresent(pages, forKey: .pages)
        try container.encodeIfPresent(topics, forKey: .topics)
    }
}
