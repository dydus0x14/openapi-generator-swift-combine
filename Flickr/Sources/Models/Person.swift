//
// Person.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Person: Codable {
    public var id: String?
    public var nsid: String?
    public var ispro: Bool?
    public var canBuyPro: Bool?
    public var iconserver: String?
    public var iconfarm: String?
    public var pathAlias: String?
    public var hasStats: Bool?
    public var coverphotoServer: String?
    public var coverphotoFarm: String?
    public var isAdFree: Bool?
    public var coverphoto: PhotoUrls?
    public var expire: Bool?
    public var userSecret: String?
    public var username: GetFavoritesContextByID200ResponseCount?
    public var realname: GetFavoritesContextByID200ResponseCount?
    public var mboxSha1sum: GetFavoritesContextByID200ResponseCount?
    public var location: GetFavoritesContextByID200ResponseCount?
    public var timezone: PersonTimezone?
    public var description: GetFavoritesContextByID200ResponseCount?
    public var photosurl: GetFavoritesContextByID200ResponseCount?
    public var profileurl: GetFavoritesContextByID200ResponseCount?
    public var mobileurl: GetFavoritesContextByID200ResponseCount?
    public var photos: PersonPhotos?
    public var yintl: String?
    public var unreadMessages: GetFavoritesContextByID200ResponseCount?
    public var cover: Cover?
    public var disableKeyboardShortcuts: GetFavoritesContextByID200ResponseCount?

    public init(id: String? = nil, nsid: String? = nil, ispro: Bool? = nil, canBuyPro: Bool? = nil, iconserver: String? = nil, iconfarm: String? = nil, pathAlias: String? = nil, hasStats: Bool? = nil, coverphotoServer: String? = nil, coverphotoFarm: String? = nil, isAdFree: Bool? = nil, coverphoto: PhotoUrls? = nil, expire: Bool? = nil, userSecret: String? = nil, username: GetFavoritesContextByID200ResponseCount? = nil, realname: GetFavoritesContextByID200ResponseCount? = nil, mboxSha1sum: GetFavoritesContextByID200ResponseCount? = nil, location: GetFavoritesContextByID200ResponseCount? = nil, timezone: PersonTimezone? = nil, description: GetFavoritesContextByID200ResponseCount? = nil, photosurl: GetFavoritesContextByID200ResponseCount? = nil, profileurl: GetFavoritesContextByID200ResponseCount? = nil, mobileurl: GetFavoritesContextByID200ResponseCount? = nil, photos: PersonPhotos? = nil, yintl: String? = nil, unreadMessages: GetFavoritesContextByID200ResponseCount? = nil, cover: Cover? = nil, disableKeyboardShortcuts: GetFavoritesContextByID200ResponseCount? = nil) {
        self.id = id
        self.nsid = nsid
        self.ispro = ispro
        self.canBuyPro = canBuyPro
        self.iconserver = iconserver
        self.iconfarm = iconfarm
        self.pathAlias = pathAlias
        self.hasStats = hasStats
        self.coverphotoServer = coverphotoServer
        self.coverphotoFarm = coverphotoFarm
        self.isAdFree = isAdFree
        self.coverphoto = coverphoto
        self.expire = expire
        self.userSecret = userSecret
        self.username = username
        self.realname = realname
        self.mboxSha1sum = mboxSha1sum
        self.location = location
        self.timezone = timezone
        self.description = description
        self.photosurl = photosurl
        self.profileurl = profileurl
        self.mobileurl = mobileurl
        self.photos = photos
        self.yintl = yintl
        self.unreadMessages = unreadMessages
        self.cover = cover
        self.disableKeyboardShortcuts = disableKeyboardShortcuts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case nsid
        case ispro
        case canBuyPro = "can_buy_pro"
        case iconserver
        case iconfarm
        case pathAlias = "path_alias"
        case hasStats = "has_stats"
        case coverphotoServer = "coverphoto_server"
        case coverphotoFarm = "coverphoto_farm"
        case isAdFree = "is_ad_free"
        case coverphoto
        case expire
        case userSecret = "user_secret"
        case username
        case realname
        case mboxSha1sum = "mbox_sha1sum"
        case location
        case timezone
        case description
        case photosurl
        case profileurl
        case mobileurl
        case photos
        case yintl
        case unreadMessages = "unread_messages"
        case cover
        case disableKeyboardShortcuts = "disable_keyboard_shortcuts"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(String.self, forKey: .id)
        nsid = try container.decodeIfPresent(String.self, forKey: .nsid)
        ispro = try container.decodeIfPresent(Bool.self, forKey: .ispro)
        canBuyPro = try container.decodeIfPresent(Bool.self, forKey: .canBuyPro)
        iconserver = try container.decodeIfPresent(String.self, forKey: .iconserver)
        iconfarm = try container.decodeIfPresent(String.self, forKey: .iconfarm)
        pathAlias = try container.decodeIfPresent(String.self, forKey: .pathAlias)
        hasStats = try container.decodeIfPresent(Bool.self, forKey: .hasStats)
        coverphotoServer = try container.decodeIfPresent(String.self, forKey: .coverphotoServer)
        coverphotoFarm = try container.decodeIfPresent(String.self, forKey: .coverphotoFarm)
        isAdFree = try container.decodeIfPresent(Bool.self, forKey: .isAdFree)
        coverphoto = try container.decodeIfPresent(PhotoUrls.self, forKey: .coverphoto)
        expire = try container.decodeIfPresent(Bool.self, forKey: .expire)
        userSecret = try container.decodeIfPresent(String.self, forKey: .userSecret)
        username = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .username)
        realname = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .realname)
        mboxSha1sum = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .mboxSha1sum)
        location = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .location)
        timezone = try container.decodeIfPresent(PersonTimezone.self, forKey: .timezone)
        description = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .description)
        photosurl = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .photosurl)
        profileurl = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .profileurl)
        mobileurl = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .mobileurl)
        photos = try container.decodeIfPresent(PersonPhotos.self, forKey: .photos)
        yintl = try container.decodeIfPresent(String.self, forKey: .yintl)
        unreadMessages = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .unreadMessages)
        cover = try container.decodeIfPresent(Cover.self, forKey: .cover)
        disableKeyboardShortcuts = try container.decodeIfPresent(GetFavoritesContextByID200ResponseCount.self, forKey: .disableKeyboardShortcuts)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(nsid, forKey: .nsid)
        try container.encodeIfPresent(ispro, forKey: .ispro)
        try container.encodeIfPresent(canBuyPro, forKey: .canBuyPro)
        try container.encodeIfPresent(iconserver, forKey: .iconserver)
        try container.encodeIfPresent(iconfarm, forKey: .iconfarm)
        try container.encodeIfPresent(pathAlias, forKey: .pathAlias)
        try container.encodeIfPresent(hasStats, forKey: .hasStats)
        try container.encodeIfPresent(coverphotoServer, forKey: .coverphotoServer)
        try container.encodeIfPresent(coverphotoFarm, forKey: .coverphotoFarm)
        try container.encodeIfPresent(isAdFree, forKey: .isAdFree)
        try container.encodeIfPresent(coverphoto, forKey: .coverphoto)
        try container.encodeIfPresent(expire, forKey: .expire)
        try container.encodeIfPresent(userSecret, forKey: .userSecret)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(realname, forKey: .realname)
        try container.encodeIfPresent(mboxSha1sum, forKey: .mboxSha1sum)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(photosurl, forKey: .photosurl)
        try container.encodeIfPresent(profileurl, forKey: .profileurl)
        try container.encodeIfPresent(mobileurl, forKey: .mobileurl)
        try container.encodeIfPresent(photos, forKey: .photos)
        try container.encodeIfPresent(yintl, forKey: .yintl)
        try container.encodeIfPresent(unreadMessages, forKey: .unreadMessages)
        try container.encodeIfPresent(cover, forKey: .cover)
        try container.encodeIfPresent(disableKeyboardShortcuts, forKey: .disableKeyboardShortcuts)
    }
}
