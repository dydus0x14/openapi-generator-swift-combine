//
// Album.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Album: Codable {
    public var id: String?
    public var primary: String?
    public var secret: String?
    public var server: String?
    public var farm: String?
    public var photos: Double?
    public var videos: Double?
    public var countViews: Double?
    public var countComments: Double?
    public var canComment: Bool?
    public var dateCreate: Double?
    public var dateUpdate: Double?
    public var title: String?
    public var description: String?

    public init(id: String? = nil, primary: String? = nil, secret: String? = nil, server: String? = nil, farm: String? = nil, photos: Double? = nil, videos: Double? = nil, countViews: Double? = nil, countComments: Double? = nil, canComment: Bool? = nil, dateCreate: Double? = nil, dateUpdate: Double? = nil, title: String? = nil, description: String? = nil) {
        self.id = id
        self.primary = primary
        self.secret = secret
        self.server = server
        self.farm = farm
        self.photos = photos
        self.videos = videos
        self.countViews = countViews
        self.countComments = countComments
        self.canComment = canComment
        self.dateCreate = dateCreate
        self.dateUpdate = dateUpdate
        self.title = title
        self.description = description
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case primary
        case secret
        case server
        case farm
        case photos
        case videos
        case countViews = "count_views"
        case countComments = "count_comments"
        case canComment = "can_comment"
        case dateCreate = "date_create"
        case dateUpdate = "date_update"
        case title
        case description
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(String.self, forKey: .id)
        primary = try container.decodeIfPresent(String.self, forKey: .primary)
        secret = try container.decodeIfPresent(String.self, forKey: .secret)
        server = try container.decodeIfPresent(String.self, forKey: .server)
        farm = try container.decodeIfPresent(String.self, forKey: .farm)
        photos = try container.decodeIfPresent(Double.self, forKey: .photos)
        videos = try container.decodeIfPresent(Double.self, forKey: .videos)
        countViews = try container.decodeIfPresent(Double.self, forKey: .countViews)
        countComments = try container.decodeIfPresent(Double.self, forKey: .countComments)
        canComment = try container.decodeIfPresent(Bool.self, forKey: .canComment)
        dateCreate = try container.decodeIfPresent(Double.self, forKey: .dateCreate)
        dateUpdate = try container.decodeIfPresent(Double.self, forKey: .dateUpdate)
        title = try container.decodeIfPresent(String.self, forKey: .title)
        description = try container.decodeIfPresent(String.self, forKey: .description)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(primary, forKey: .primary)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(server, forKey: .server)
        try container.encodeIfPresent(farm, forKey: .farm)
        try container.encodeIfPresent(photos, forKey: .photos)
        try container.encodeIfPresent(videos, forKey: .videos)
        try container.encodeIfPresent(countViews, forKey: .countViews)
        try container.encodeIfPresent(countComments, forKey: .countComments)
        try container.encodeIfPresent(canComment, forKey: .canComment)
        try container.encodeIfPresent(dateCreate, forKey: .dateCreate)
        try container.encodeIfPresent(dateUpdate, forKey: .dateUpdate)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
    }
}
