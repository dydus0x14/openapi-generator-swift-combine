//
// Tag.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Tag: Codable {
    public var id: String?
    public var author: String?
    public var authorname: String?
    public var raw: String?
    public var content: String?
    public var machineTag: Bool?

    public init(id: String? = nil, author: String? = nil, authorname: String? = nil, raw: String? = nil, content: String? = nil, machineTag: Bool? = nil) {
        self.id = id
        self.author = author
        self.authorname = authorname
        self.raw = raw
        self.content = content
        self.machineTag = machineTag
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case author
        case authorname
        case raw
        case content = "_content"
        case machineTag = "machine_tag"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(String.self, forKey: .id)
        author = try container.decodeIfPresent(String.self, forKey: .author)
        authorname = try container.decodeIfPresent(String.self, forKey: .authorname)
        raw = try container.decodeIfPresent(String.self, forKey: .raw)
        content = try container.decodeIfPresent(String.self, forKey: .content)
        machineTag = try container.decodeIfPresent(Bool.self, forKey: .machineTag)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(authorname, forKey: .authorname)
        try container.encodeIfPresent(raw, forKey: .raw)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(machineTag, forKey: .machineTag)
    }
}
